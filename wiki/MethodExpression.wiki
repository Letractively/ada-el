#summary Method Expression

= Introduction =

A method expression represents a method to be executed on an object.
The valid syntax for the method expression is a subset of the EL expression.
Method expressions are used in JSF to bind an action or an event to an object method.

For example:
{{{
"#{user.print}"
}}}

defines a method expression that allows to invoke a `print` operation on the
`user` bean.

To be able to invoke such operation, some preparation is necessary on the bean
(the Java EL implementation can leverage the use of introspection to find the
method and execute it; this is not possible in Ada).

= Bean Declaration =

To be able to invoke a method on a bean, we have to:
  * Implement the `Method_Bean` interface on the bean,
  * Create the binding helper for the method to invoke

The `Method_Bean` interface defines the `Get_Method_Bindings` function
which has to return a list of methods that can be invoked in the bean.
(Again, Java does this through introspection).

{{{
with EL.Beans;
with EL.Beans.Methods;
...
type Person is new EL.Beans.Bean and EL.Beans.Methods.Method_Bean with private;
...
overriding
function Get_Method_Bindings (From : in Person)
                              return EL.Beans.Methods.Method_Binding_Array_Access;
}}}


= Method Binding =

The method binding is a small static and read-only descriptor that describes
the method that can be invoke on the bean.  The binding defines a method proxy
which performs some necessary conversion to the target bean type.

Let's say the method to invoke on the `Person` bean is the following:
{{{
function Print (P : in Person; Title : in String) return String;
}}}

The method binding is created by instantiating the `Func_String` package:
{{{
with EL.Beans.Methods.Func_String;

...
package Print_Binding is
  new Func_String.Bind (Bean   => Person,
                        Method => Print,
                        Name   => "print");
}}}

The package will implement a small proxy function and will provide the method
binding descriptor.


= Create the Method Expression =


{{{
Method : EL.Expressions.Method_Expression;
..
Method := EL.Expressions.Create_Expression ("#{user.print}", Ctx);
}}}

=  =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages