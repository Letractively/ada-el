#summary Overview of Ada EL

= Introduction =

The JSP and [http://en.wikipedia.org/wiki/JavaServer_Faces JSF] Unified Expression Language is used to give access
to Java bean components within a presentation page (JSP, XHTML).
For JSF the expression language creates a bi-directional binding where
the value can be obtained when displaying a page but also modified (after a POST).
The unified expression language is described in [http://www.jcp.org/en/jsr/detail?id=245 JSR-245] (See also
[http://java.sun.com/products/jsp/reference/techart/unifiedEL.html Unified EL]).

Example of presentation page:
{{{
  <b>${user.firstName}</b>
}}}

The Ada EL is a library that implements the expression language and provides
an Ada binding to use it.  The example below shows a code extract to
bind an Ada record `Joe` to the name `user` and evaluate the above expression.

{{{
   Ctx    : EL.Contexts.Default.Default_Context;
   E      : EL.Expressions.Expression;
   Result : EL.Objects.Object;
...
   E := EL.Expressions.Create_Expression ("${user.firstName}", Ctx);
...
   --  Bind the context to 'Joe' and evaluate
   Ctx.Set_Variable ("user", Joe);
   Result := E.Get_Value (Ctx);
}}}


= EL.Objects.Object =

Unlike Java, Ada does not provide a root data type to represent other types (the `java.lang.Object`).  This makes the adaptation of Ada EL more difficult because
the expression language heavily relies on Java mechanisms (`Object` type and introspection).

The `EL.Objects` package provides the data type `Object` that allows to manage
entities of different types.  When an expression is evaluated, the result is
returned in an `Object`.  The record holds the value itself as well as a basic
type indicator (boolean, integer, float, string, wide wide string, ...).

The `Object` is also used to provide variable values to the expression evaluator.

To create an `Object` from a basic type, several `To_Object` functions are provided.

{{{
   Val : EL.Objects.Object := EL.Objects.Object.To_Object ("A string");
}}}

To get access to the value held by `Object`, several `To_`_type_ functions are
provided:

{{{
  S : constant String := EL.Objects.Object.To_String (Val);
}}}

The `To_`_type_ function will try to convert the value to the target type.

= EL.Beans =

The `EL.Beans` package defines two interfaces that allow to plug an Ada tagged
record to the expression evaluator. The `Readonly_Bean` interface defined a unique
`Get_Value` function that must be implemented.  This function is called by
the expression context resolver to find the value associated with a property.
Basically, the Ada object will be defined as a variable and associated with
a name (for example `user`).  The `Get_Value` function will be called with
the property name and the value must be returned as an `Object` (for example `firstName`).

For example:
{{{
   type Person is new EL.Beans.Readonly_Bean with private;

   --  Get the value identified by the name.
   function Get_Value (From : Person; Name : String) return EL.Objects.Object;
}}}

The `Bean` interface redefines the `Readonly_Bean` to define the `Set_Value` procedure.
This interface should be implemented when the expression evaluator has to modify
a value.

= Class Diagram =

[http://ada-el.googlecode.com/svn/trunk/uml/Expression.png]


= EL.Expressions =


= EL.Contexts =